% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/client.R
\name{redis_client}
\alias{redis_client}
\title{Create a redis client}
\usage{
redis_client(type = NULL, ...)
}
\arguments{
\item{type}{type of client, see details}

\item{...}{parameters to transmit to the client implementation (host, port, ...)}
}
\value{
instance of a RedisClient class (described in details section)
}
\description{
This functions return an object embedding Redis connection parameters. It can be propagated across all workers to share the same
connect to the same redis database.
}
\details{
RedisClient:
Returns an instance of \code{RedisClient} class with methods allowing to manipulate 'Redis' database using a unified interface

As this package only needs a subset of 'Redis' commands are implemented. It's a very simple implementation to avoid
extra dependency, limited to this package needs.

The returned "client" embeds connection configuration and can be propagated in distributed workers
(like with 'foreach' package). So the client connection parameters are only to be defined once.

Clients:

\describe{
 \item{rredis}{rredis package, discontinued}
 \item{rcpp}{for RcppRedis}
 \item{rredux}{for redux and rrlite}
 \item{mock}{Mock type, in memory R-only client}
}
The returned instance exposes the following functions :
\describe{
\item{connect()}{connect to redis db}
\item{get(key)}{get key value}
\item{hashGet(key, field)}{get field value in \code{HashSet} named by key}
\item{hashSet(key, field, value)}{set field value in \code{HashSet} named by key}
\item{hashSetCounter(key, field, value)}{set field value for a counter in HashSet named by \code{key}}
\item{hashIncrBy(key, field, by)}{Increment a field by the amount provided in \code{by}. Caution the field must have been initialized by \code{hashSetCounter} not by \code{hashSet} }
\item{delete(key)}{remove the key key value}
\item{exists(key)}{returns TRUE the key exists}
\item{pushTail(key, value)}{add a value on the tail of the list named by key}
\item{hashGetAll(key)}{returns all fields in the HashSet named by key. If not implemented client will not be usable for monitoring}
}

Accepted parameters are
\describe{
 \item{host}{name of host}
 \item{port}{get key value}
 \item{database}{Redis database number}
 \item{...}{Some other parameters, not yet normalized across interfaces}
}
}
\examples{
# Create a simple client using  rredis as backend
client = redis_client(host="127.0.0.1", type="rredis")

# Using another backend and database number 2
client = redis_client(host="127.0.0.1", type="redux", database=2)
\dontrun{
client$connect() # Initiate connection
}

client = redis_client("mock") # Mock client (in-memory only client)

client$connect()

client$exists("my-key") # Test if 'my-key' exists
client$set("my-key", 12) # Set a value
client$get("my-key")

client$hashSetCounter("a-key", "counter", 1) # Set a counter value in a hash field
client$hashIncrBy("a-key", "counter", 1) # Increment by 1

}
\seealso{
Other backend: 
\code{\link{RedisClientMock-class}},
\code{\link{RedisClientRRedis-class}},
\code{\link{RedisClientRcpp-class}},
\code{\link{RedisClientRedux-class}}
}
\concept{backend}
