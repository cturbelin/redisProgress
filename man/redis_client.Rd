% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/client.R
\name{redis_client}
\alias{redis_client}
\title{Create a redis client}
\usage{
redis_client(type = NULL, ...)
}
\arguments{
\item{type}{type of client to use (rredis, rcpp for RcppRedis)}

\item{...}{paramerters to transmit to the client implementation (host, port, ...)}
}
\value{
instance of a RedisClient class (described in details section)
}
\description{
This functions return an object embedding Redis connection parameters. It can be propagated accross all workers to share the same
connect to the same redis database.
}
\details{
RedisClient:
Returns an instance of RedisClient* class with methods allowing to manipulate redis database using a unified interface
Only needed commands by this package are implemented. It's a very simple implementation to avoid
extra dependency, limited to this package needs

The returned "client" embeds connexion configuration and can be propagated in distributed workers
(like in foreach). So the client connexion parameters are only to be defined once


The returned instance exposes the following functions :
\describe{
\item{connect()}{connect to preconfigured redis db}
\item{get(key)}{get key value}
\item{hashGet(key, field)}{get field value in HashSet named by key}
\item{hashSet(key, field, value)}{set field value in HashSet named by key}
\item{hashSetCounter(key, field, value)}{set field value for a counter in HashSet named by key}
\item{delete(key)}{remove the key key value}
\item{exists(key)}{returns TRUE the key exists}
\item{pushTail(key, value)}{add a value on the tail of the list named by key}
\item{hashGetAll(key)}{returns all fields in the HashSet named by key. If not implemented client will not be useable for monitoring}
}

Accepted parameters are
\describe{
 \item{host}{name of host}
 \item{port}{get key value}
 \item{database}{Redis database number}
 \item{...}{Some other parameters, not yet normalized accross interfaces}
}
}
\examples{
# Create a simple client using  rredis as backend
client = redis_client(host="127.0.0.1", type="rredis")

# Using another backend and database number 2
client = redis_client(host="127.0.0.1", type="redux", database=2)

}
